# main_master_only.py

import os
import json
import base64
import pytz
import sys
import time
from io import StringIO
from typing import List, Tuple, Optional, Dict, Any
from datetime import datetime, timezone

import pandas as pd
import requests
import gspread
from google.oauth2.service_account import Credentials
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import logging

# ==============================================================================
# ‚öôÔ∏è SECTION 1: CONFIGURATION
# ==============================================================================
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class Config:
    """‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
    # Target Website
    BASE_URL = "https://jobm.edoclite.com/jobManagement"
    LOGIN_URL = f"{BASE_URL}/pages/login"
    INDEX_URL = f"{BASE_URL}/pages/index"
    TABS_TO_SCRAPE: List[int] = [13, 14, 15, 8, 7, 11]
    TAB_NAMES: Dict[int, str] = {
        13: "‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà_‡πÅ‡∏à‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏≠‡∏∑‡πà‡∏ô",
        14: "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£_‡πÅ‡∏à‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏≠‡∏∑‡πà‡∏ô", 
        15: "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö_‡πÅ‡∏à‡πâ‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏≠‡∏∑‡πà‡∏ô",
        8: "‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà_‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå",
        7: "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£_‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå",
        11: "‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à_‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏®‡∏π‡∏ô‡∏¢‡πå"
    }

    # Credentials (from Environment Variables)
    EDOCLITE_USER = os.getenv("EDOCLITE_USER", "").strip()
    EDOCLITE_PASS = os.getenv("EDOCLITE_PASS", "").strip()
    GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID", "").strip()
    GOOGLE_SVC_JSON_RAW = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON", "").strip()
    GOOGLE_SVC_JSON_B64 = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON_B64", "").strip()
    LINE_NOTIFY_TOKEN = os.getenv("LINE_NOTIFY_TOKEN", "").strip()

    # Google Sheets
    GOOGLE_API_SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    MASTER_SHEET_NAME = "Master_Data"
    LOG_SHEET_NAME = "Sync_Logs"

# ==============================================================================
# üì¶ SECTION 2: HELPER SERVICES (CLASSES)
# ==============================================================================

class Notifier:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE Notify"""
    def __init__(self, token: str):
        self.token = token

    def send(self, message: str) -> bool:
        if not self.token:
            logger.warning("‚ö†Ô∏è LINE_NOTIFY_TOKEN is not set. Skipping notification.")
            return False
        try:
            url = "https://notify-api.line.me/api/notify"
            headers = {"Authorization": f"Bearer {self.token}"}
            data = {"message": message}
            response = requests.post(url, headers=headers, data=data, timeout=10)
            if response.status_code == 200:
                logger.info("üì± LINE Notify sent successfully.")
                return True
            else:
                logger.error(f"‚ùå LINE Notify failed with status code {response.status_code}: {response.text}")
                return False
        except requests.RequestException as e:
            logger.error(f"‚ùå Exception during LINE Notify request: {e}")
            return False

class GoogleSheetManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏±‡∏ö Google Sheets"""
    def __init__(self, sheet_id: str, svc_json_raw: str, svc_json_b64: str):
        self.sheet_id = sheet_id
        self.client = self._get_gspread_client(svc_json_raw, svc_json_b64)
        self.spreadsheet = self.client.open_by_key(self.sheet_id)
        logger.info(f"‚úÖ Connected to Google Sheet: '{self.spreadsheet.title}'")

    def _get_gspread_client(self, svc_json_raw: str, svc_json_b64: str) -> gspread.Client:
        info = None
        try:
            if svc_json_b64:
                info = json.loads(base64.b64decode(svc_json_b64).decode("utf-8"))
            elif svc_json_raw:
                info = json.loads(svc_json_raw)
            elif os.path.exists("service_account.json"):
                with open("service_account.json", "r", encoding="utf-8") as f:
                    info = json.load(f)
            if not info:
                raise ValueError("Google Service Account JSON not found.")
            creds = Credentials.from_service_account_info(info, scopes=Config.GOOGLE_API_SCOPES)
            return gspread.authorize(creds)
        except Exception as e:
            logger.error(f"‚ùå Google Sheets connection error: {e}")
            raise

    def get_or_create_worksheet(self, title: str, headers: Optional[List[str]] = None) -> gspread.Worksheet:
        try:
            return self.spreadsheet.worksheet(title)
        except gspread.exceptions.WorksheetNotFound:
            logger.info(f"üìÑ Creating new sheet: '{title}'")
            ws = self.spreadsheet.add_worksheet(title=title, rows=1, cols=len(headers) if headers else 20)
            if headers:
                ws.update("A1", [headers])
                ws.freeze(rows=1)
            return ws

    def get_all_job_nos(self, worksheet_name: str) -> set:
        """‡∏î‡∏∂‡∏á Job_No ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥"""
        try:
            ws = self.get_or_create_worksheet(worksheet_name)
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Job_No) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            job_nos = ws.col_values(1)[1:] # [1:] to skip header
            logger.info(f"Found {len(job_nos)} existing Job_Nos in '{worksheet_name}'.")
            return set(job_nos)
        except Exception as e:
            logger.error(f"‚ùå Could not fetch existing Job_Nos from '{worksheet_name}': {e}")
            return set()
            
    def get_job_data_with_positions(self, worksheet_name: str) -> Dict[str, Dict]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Job_No ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Status"""
        try:
            ws = self.get_or_create_worksheet(worksheet_name)
            all_data = ws.get_all_records()
            headers = ws.row_values(1)
            
            # ‚úÖ ‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Job_No ‡πÅ‡∏•‡∏∞ Source_Tab (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤)
            job_no_col_idx = None
            source_tab_col_idx = None
        
        for idx, header in enumerate(headers):
            header_str = str(header).strip()
            
            # ‡∏´‡∏≤ Job_No column (‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö Job_No ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ Job No.)
            if header_str == 'Job_No':
                job_no_col_idx = idx + 1  # gspread uses 1-based indexing
            elif job_no_col_idx is None and ('job' in header_str.lower() and 'no' in header_str.lower()):
                job_no_col_idx = idx + 1
                
            # ‡∏´‡∏≤ Source_Tab column
            elif header_str == 'Source_Tab':
                source_tab_col_idx = idx + 1
        
        if job_no_col_idx is None:
            logger.warning(f"‚ö†Ô∏è No Job_No column found in {worksheet_name}")
            return {}
        
        job_positions = {}
        for row_idx, row_data in enumerate(all_data, start=2):  # start=2 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß 1 ‡∏Ñ‡∏∑‡∏≠ header
            # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏à‡∏£‡∏¥‡∏á
            job_no_key = None
            for key in row_data.keys():
                if key == 'Job_No' or ('job' in str(key).lower() and 'no' in str(key).lower()):
                    job_no_key = key
                    break
            
            if job_no_key:
                job_no = str(row_data.get(job_no_key, '')).strip()
                if job_no:
                    job_positions[job_no] = {
                        'row': row_idx,
                        'source_tab_col': source_tab_col_idx,
                        'current_status': row_data.get('Source_Tab', '')
                    }
        
        logger.info(f"Found {len(job_positions)} existing jobs with positions in '{worksheet_name}'.")
        return job_positions
    except Exception as e:
        logger.error(f"‚ùå Could not fetch job data with positions from '{worksheet_name}': {e}")
        return {}
    
    def update_job_status(self, worksheet_name: str, job_no: str, new_status: str, row: int, col: int):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            ws = self.get_or_create_worksheet(worksheet_name)
            ws.update_cell(row, col, new_status)
            logger.info(f"‚úÖ Updated {job_no} status to '{new_status}' at row {row}")
        except Exception as e:
            logger.error(f"‚ùå Failed to update status for {job_no}: {e}")

    def append_rows(self, worksheet_name: str, data_rows: List[List[Any]]):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢‡∏ä‡∏µ‡∏ï"""
        if not data_rows:
            return
        try:
            ws = self.get_or_create_worksheet(worksheet_name)
            ws.append_rows(data_rows, value_input_option='USER_ENTERED')
            logger.info(f"‚úÖ Appended {len(data_rows)} new rows to '{worksheet_name}'.")
        except Exception as e:
            logger.error(f"‚ùå Failed to append rows to '{worksheet_name}': {e}")
    
    def log_activity(self, activity: str, details: str = "", status: str = "Success"):
        try:
            ws = self.get_or_create_worksheet(Config.LOG_SHEET_NAME, headers=['Timestamp', 'Activity', 'Details', 'Status'])
            
            # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
            thailand_tz = pytz.timezone('Asia/Bangkok')
            thailand_time = datetime.now(thailand_tz)
            ts = thailand_time.strftime('%d/%m/%Y %H:%M:%S')
            
            ws.insert_row([ts, activity, details, status], 2)
        except Exception as e:
            logger.error(f"‚ùå Failed to log activity: {e}")

# ==============================================================================
# üåê SECTION 3: WEB SCRAPER
# ==============================================================================

class WebScraper:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Scrape ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ Selenium"""
    def __init__(self, user: str, password: str):
        self.user = user
        self.password = password
        if not self.user or not self.password:
            raise ValueError("EDOCLITE_USER and EDOCLITE_PASS must be set.")

    def create_driver(self) -> webdriver.Chrome:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Chrome WebDriver ‡∏î‡πâ‡∏ß‡∏¢ options ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36")
        
        return webdriver.Chrome(options=chrome_options)

    def login(self, driver: webdriver.Chrome) -> Tuple[bool, webdriver.Chrome]:
        """‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            logger.info(f"Navigating to login page: {Config.LOGIN_URL}")
            driver.get(Config.LOGIN_URL)
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏´‡∏≤ elements
            wait = WebDriverWait(driver, 10)
            
            # ‡πÉ‡∏™‡πà username
            username_field = wait.until(EC.presence_of_element_located((By.NAME, "username")))
            username_field.clear()
            username_field.send_keys(self.user)
            
            # ‡πÉ‡∏™‡πà password
            password_field = driver.find_element(By.NAME, "password")
            password_field.clear()
            password_field.send_keys(self.password)
            
            # ‡∏Ñ‡∏•‡∏¥‡∏Å login button
            login_button = driver.find_element(By.NAME, "login__username")
            login_button.click()
            
            # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            time.sleep(3)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if "login" in driver.current_url.lower():
                logger.error("‚ùå Login failed: Redirected back to login page.")
                return False, driver
            
            logger.info("‚úÖ Login successful.")
            return True, driver
            
        except Exception as e:
            logger.error(f"‚ùå Exception during login: {e}")
            driver.save_screenshot("login_error.png")
            return False, driver

    def extract_data_from_tab(self, driver: webdriver.Chrome, tab_num: int) -> pd.DataFrame:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ tab"""
        url = f"{Config.INDEX_URL}?tab={tab_num}"
        logger.info(f"Scraping tab {tab_num} at {url}")
        
        try:
            driver.get(url)
            time.sleep(3)
            
            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô page length ‡πÄ‡∏õ‡πá‡∏ô show all
            try:
                wait = WebDriverWait(driver, 5)
                length_select = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, 'select[name$="_length"]')))
                select = Select(length_select)
                select.select_by_value("-1")
                time.sleep(2)
                logger.info("Set table length to show all entries.")
            except (TimeoutException, NoSuchElementException):
                logger.warning("Could not find or change page length selector.")
                pass
            
            # ‡∏î‡∏∂‡∏á HTML content
            html_content = driver.page_source
            
            # ‡πÅ‡∏õ‡∏•‡∏á HTML ‡πÄ‡∏õ‡πá‡∏ô DataFrame
            dfs = pd.read_html(StringIO(html_content))
            job_df = next((df for df in dfs if not df.empty and any('job' in str(col).lower() for col in df.columns)), pd.DataFrame())
            
            if job_df.empty:
                logger.warning(f"‚ö†Ô∏è No data table found on tab {tab_num}.")
                return pd.DataFrame()
            
            logger.info(f"üìä Found {len(job_df)} rows in tab {tab_num}.")
            return job_df
            
        except Exception as e:
            logger.error(f"‚ùå Failed to extract data from tab {tab_num}: {e}")
            driver.save_screenshot(f"tab_{tab_num}_error.png")
            return pd.DataFrame()

# ==============================================================================
# üöÄ SECTION 4: MAIN APPLICATION LOGIC
# ==============================================================================

class JobSyncApplication:
    def __init__(self, config: Config):
        self.config = config
        self.notifier = Notifier(config.LINE_NOTIFY_TOKEN)
        self.sheet_manager = GoogleSheetManager(
            config.GOOGLE_SHEET_ID, 
            config.GOOGLE_SVC_JSON_RAW, 
            config.GOOGLE_SVC_JSON_B64
        )
        self.scraper = WebScraper(config.EDOCLITE_USER, config.EDOCLITE_PASS)
  
# ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå main_master_only.py
# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô method _process_and_add_new_jobs

# ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå main_master_only.py
# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç method _process_and_add_new_jobs

    def _process_and_add_new_jobs(self, all_tab_data: Dict[int, pd.DataFrame]) -> Tuple[int, int]:
        """‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Job ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô Master Sheet ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°"""
        logger.info("Processing jobs: checking for new jobs and status updates...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Thailand timezone
        import pytz
        thailand_tz = pytz.timezone('Asia/Bangkok')
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Job ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        existing_jobs = self.sheet_manager.get_job_data_with_positions(self.config.MASTER_SHEET_NAME)
        
        new_records_to_add = []
        updated_jobs_count = 0
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î headers ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        all_headers = set(['Job_No', 'Source_Tab', 'First_Seen', 'Last_Updated'])
    
        for tab_num, df in all_tab_data.items():
            if df.empty:
                continue
            
            # ‡πÄ‡∏Å‡πá‡∏ö Headers ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô Job No. ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥)
            for col in df.columns:
                col_str = str(col)
                if not (('job' in col_str.lower() and 'no' in col_str.lower()) or col_str.lower() == 'job no.'):
                    all_headers.add(col_str)
    
            tab_name = self.config.TAB_NAMES.get(tab_num, f"Tab_{tab_num}")
            
            # ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ Job No
            job_no_col = None
            for col in df.columns:
                col_str = str(col).lower()
                if 'job' in col_str and ('no' in col_str or 'number' in col_str):
                    job_no_col = col
                    break
            
            if not job_no_col:
                logger.warning(f"‚ö†Ô∏è No 'Job No.' column found in tab {tab_num}. Skipping.")
                continue
    
            for _, row in df.iterrows():
                job_no = str(row[job_no_col]).strip()
                if not job_no:
                    continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Job No
                
                # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Last_Updated
                current_time = datetime.now(thailand_tz)
                last_updated_time = current_time.strftime('%d/%m/%Y %H:%M:%S')
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Job No ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if job_no in existing_jobs:
                    # ‚úÖ ‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏° - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Last_Updated ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                    current_status = existing_jobs[job_no]['current_status']
                    job_row = existing_jobs[job_no]['row']
                    source_tab_col = existing_jobs[job_no]['source_tab_col']
                    
                    # ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Last_Updated
                    last_updated_col = self.sheet_manager.find_column_index(self.config.MASTER_SHEET_NAME, 'Last_Updated')
                    
                    # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Last_Updated ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
                    if last_updated_col:
                        self.sheet_manager.update_cell(self.config.MASTER_SHEET_NAME, job_row, last_updated_col, last_updated_time)
                        logger.info(f"üïí Updated Last_Updated for {job_no}: {last_updated_time}")
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                    if current_status != tab_name:
                        # ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Source_Tab
                        if source_tab_col:
                            self.sheet_manager.update_cell(self.config.MASTER_SHEET_NAME, job_row, source_tab_col, tab_name)
                        
                        updated_jobs_count += 1
                        logger.info(f"üîÑ Status changed for {job_no}: {current_status} ‚Üí {tab_name}")
                        self.notifier.send(f"üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô: {job_no}\n   ‡∏à‡∏≤‡∏Å: {current_status}\n   ‡πÄ‡∏õ‡πá‡∏ô: {tab_name}\n   ‡πÄ‡∏ß‡∏•‡∏≤: {last_updated_time}")
                    else:
                        # ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô - ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á stamp ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß
                        logger.info(f"‚úÖ Job {job_no} still active in {tab_name} (Last_Updated: {last_updated_time})")
                    
                else:
                    # ‚úÖ ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                    new_record = {}
                    
                    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
                    for col, val in row.items():
                        col_str = str(col)
                        if not (('job' in col_str.lower() and 'no' in col_str.lower()) or col_str.lower() == 'job no.'):
                            new_record[col_str] = str(val)
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡πÄ‡∏®‡∏©
                    new_record['Job_No'] = job_no
                    new_record['Source_Tab'] = tab_name
                    new_record['First_Seen'] = last_updated_time  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                    new_record['Last_Updated'] = last_updated_time  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Last_Updated
                    
                    new_records_to_add.append(new_record)
                    existing_jobs[job_no] = {'current_status': tab_name}
                    
                    logger.info(f"üÜï New job found: {job_no} in {tab_name} (Time: {last_updated_time})")
                    self.notifier.send(f"üÜï ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: {job_no} (‡∏à‡∏≤‡∏Å {tab_name})\n   ‡πÄ‡∏ß‡∏•‡∏≤: {last_updated_time}")
    
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á Sheet
        if new_records_to_add:
            master_ws = self.sheet_manager.get_or_create_worksheet(self.config.MASTER_SHEET_NAME)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö headers ‡πÉ‡∏´‡πâ Job_No ‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
            final_headers = ['Job_No', 'First_Seen', 'Last_Updated', 'Source_Tab'] + sorted([h for h in all_headers if h not in ['Job_No', 'First_Seen', 'Last_Updated', 'Source_Tab']])
            
            if master_ws.row_count == 1 and master_ws.col_count == 1 and master_ws.cell(1,1).value is None:
                master_ws.update("A1", [final_headers])
            else:
                existing_headers = master_ws.row_values(1)
                if set(existing_headers) != set(final_headers):
                    logger.info("üìã Updating sheet headers...")
                    master_ws.update("A1", [final_headers])
    
            # ‡πÅ‡∏õ‡∏•‡∏á dicts ‡πÄ‡∏õ‡πá‡∏ô list of lists
            rows_to_append = []
            for record in new_records_to_add:
                row = [record.get(h, "") for h in final_headers]
                rows_to_append.append(row)
            
            self.sheet_manager.append_rows(self.config.MASTER_SHEET_NAME, rows_to_append)
    
        logger.info(f"üìä Processing completed: {len(new_records_to_add)} new jobs, {updated_jobs_count} status updates")
        return len(new_records_to_add), updated_jobs_count

# ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå main_master_only.py
# ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á method run ‡πÉ‡∏ô class JobSyncApplication

    def run(self):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        import time
        
        start_time = datetime.now()
        self.sheet_manager.log_activity("Sync Start", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏á‡∏≤‡∏ô")
        
        all_tab_data = {}
        successful_tabs, failed_tabs = [], []
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á WebDriver
        driver = self.scraper.create_driver()
        
        try:
            # Login
            logged_in, driver = self.scraper.login(driver)
            if not logged_in:
                self.notifier.send("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö edoclite ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username/password")
                self.sheet_manager.log_activity("Login Failed", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ", "Failed")
                raise Exception("Login failed to edoclite system")
            
            logger.info("‚úÖ Successfully logged into edoclite system")
            
            # Scrape ‡πÅ‡∏ï‡πà‡∏•‡∏∞ tab
            for tab in self.config.TABS_TO_SCRAPE:
                try:
                    logger.info(f"üìä Starting to scrape tab {tab}...")
                    df = self.scraper.extract_data_from_tab(driver, tab)
                    if not df.empty:
                        all_tab_data[tab] = df
                        successful_tabs.append(tab)
                        logger.info(f"‚úÖ Tab {tab}: Successfully scraped {len(df)} records")
                    else:
                        failed_tabs.append(tab)
                        logger.warning(f"‚ö†Ô∏è Tab {tab}: No data found")
                except Exception as tab_error:
                    failed_tabs.append(tab)
                    logger.error(f"‚ùå Tab {tab}: Error - {str(tab_error)}")
                
                time.sleep(2)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á tab
        
        except Exception as main_error:
            logger.error(f"üí• Critical error during scraping: {str(main_error)}")
            raise
        finally:
            if driver:
                driver.quit()
                logger.info("üåê Browser closed successfully")
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        logger.info("üîÑ Processing scraped data...")
        new_jobs_count, updated_jobs_count = self._process_and_add_new_jobs(all_tab_data)
        
        # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        total_jobs_processed = sum(len(df) for df in all_tab_data.values())
        timestamp_jobs_updated = total_jobs_processed  # ‡∏ó‡∏∏‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏à‡∏∞‡πÑ‡∏î‡πâ timestamp
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        # Log summary
        summary_details = f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà {new_jobs_count} ‡∏á‡∏≤‡∏ô, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {updated_jobs_count} ‡∏á‡∏≤‡∏ô, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï timestamp {timestamp_jobs_updated} ‡∏á‡∏≤‡∏ô. ‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(successful_tabs)}. ‡πÅ‡∏ó‡πá‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {len(failed_tabs)}."
        status = "Success" if not failed_tabs else "Partial Success"
        self.sheet_manager.log_activity("Sync Complete", summary_details, status)
        
        # Send enhanced final notification
        summary_msg = f"""‚úÖ ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!
    
    üÜï ‡∏û‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: {new_jobs_count} ‡∏á‡∏≤‡∏ô
    üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô: {updated_jobs_count} ‡∏á‡∏≤‡∏ô  
    üïí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï timestamp: {timestamp_jobs_updated} ‡∏á‡∏≤‡∏ô
    üìä ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_jobs_processed} ‡∏á‡∏≤‡∏ô
    üóÇÔ∏è ‡πÅ‡∏ó‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {len(successful_tabs)}/{len(self.config.TABS_TO_SCRAPE)}
    ‚è±Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤: {duration:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    
    üìã ‡∏™‡∏£‡∏∏‡∏õ: ‡∏ó‡∏∏‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ stamp ‡πÄ‡∏ß‡∏•‡∏≤ Last_Updated ‡πÉ‡∏´‡∏°‡πà
    
    üîó Master Sheet: https://docs.google.com/spreadsheets/d/{self.config.GOOGLE_SHEET_ID}"""
        
        self.notifier.send(summary_msg)
        logger.info(f"üéâ Job synchronization completed successfully in {duration:.2f} seconds")
        
        return {
            'success': True,
            'new_jobs': new_jobs_count,
            'updated_jobs': updated_jobs_count,
            'timestamp_updated': timestamp_jobs_updated,
            'total_processed': total_jobs_processed,
            'successful_tabs': len(successful_tabs),
            'failed_tabs': len(failed_tabs),
            'duration': duration
        }


# ==============================================================================
# ‚ñ∂Ô∏è SECTION 5: SCRIPT EXECUTION
# ==============================================================================

if __name__ == "__main__":
    try:
        app_config = Config()
        app = JobSyncApplication(app_config)
        app.run()
        sys.exit(0)
    except (ValueError, gspread.exceptions.GSpreadException) as e:
        logger.error(f"üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠ Google Sheets: {e}")
        token = os.getenv("LINE_NOTIFY_TOKEN", "").strip()
        if token:
            Notifier(token).send(f"üí• ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤): {e}")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}", exc_info=True)
        token = os.getenv("LINE_NOTIFY_TOKEN", "").strip()
        if token:
            Notifier(token).send(f"üí• ‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á: ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log {e}")
        sys.exit(1)
