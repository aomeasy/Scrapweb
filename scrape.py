import os, json, base64, asyncio
import sys
from io import StringIO
from typing import List, Tuple, Optional
import pandas as pd

from playwright.async_api import async_playwright
import logging

# ---- Google Sheets (gspread) ----
import gspread
from google.oauth2.service_account import Credentials

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --------- Config ----------
BASE = "https://jobm.edoclite.com/jobManagement"
LOGIN = f"{BASE}/pages/login"
INDEX = f"{BASE}/pages/index"
TABS: List[int] = [13, 14, 15, 8, 7, 11]

USER = os.getenv("EDOCLITE_USER", "").strip()
PASS = os.getenv("EDOCLITE_PASS", "").strip()

SHEET_ID = os.getenv("GOOGLE_SHEET_ID", "").strip()
SVC_JSON_RAW = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON", "").strip()
SVC_JSON_B64 = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON_B64", "").strip()

SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

# --------- Google Sheets helpers ----------
def get_gspread_client() -> gspread.Client:
    """
    ‡∏£‡∏±‡∏ö Service Account ‡∏à‡∏≤‡∏Å:
    - GOOGLE_SERVICE_ACCOUNT_JSON_B64 (base64)
    - ‡∏´‡∏£‡∏∑‡∏≠ GOOGLE_SERVICE_ACCOUNT_JSON (raw JSON ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô)
    - ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå service_account.json (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô local)
    """
    info = None
    
    try:
        if SVC_JSON_B64:
            logger.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Service Account ‡∏à‡∏≤‡∏Å Base64...")
            logger.info(f"Base64 length: {len(SVC_JSON_B64)}")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö decode base64
            try:
                decoded_bytes = base64.b64decode(SVC_JSON_B64)
                logger.info(f"Decoded bytes length: {len(decoded_bytes)}")
                decoded_str = decoded_bytes.decode("utf-8")
                logger.info("‚úÖ Base64 decode ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                info = json.loads(decoded_str)
                logger.info("‚úÖ JSON parse ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            except Exception as decode_error:
                logger.error(f"‚ùå Base64 decode error: {decode_error}")
                raise RuntimeError(f"Base64 decode failed: {decode_error}")
                
        elif SVC_JSON_RAW:
            logger.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Service Account ‡∏à‡∏≤‡∏Å JSON ‡∏î‡∏¥‡∏ö...")
            info = json.loads(SVC_JSON_RAW)
        elif os.path.exists("service_account.json"):
            logger.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Service Account ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå service_account.json...")
            with open("service_account.json", "r", encoding="utf-8") as f:
                info = json.load(f)

        if not info:
            raise RuntimeError(
                "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Google Service Account JSON\n"
                "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GOOGLE_SERVICE_ACCOUNT_JSON ‡∏´‡∏£‡∏∑‡∏≠ GOOGLE_SERVICE_ACCOUNT_JSON_B64"
            )

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        required_fields = ['type', 'project_id', 'private_key', 'client_email']
        for field in required_fields:
            if field not in info:
                raise RuntimeError(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå {field} ‡πÉ‡∏ô Service Account JSON")
        
        logger.info(f"üìß Service Account Email: {info['client_email']}")
        logger.info(f"üÜî Project ID: {info['project_id']}")

        creds = Credentials.from_service_account_info(info, scopes=SCOPES)
        client = gspread.authorize(creds)
        logger.info("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return client
        
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå JSON decode error: {e}")
        raise RuntimeError(f"Service Account JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {e}")
    except Exception as e:
        logger.error(f"‚ùå Google Sheets connection error: {e}")
        raise RuntimeError(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets: {e}")

def upsert_worksheet(sh: gspread.Spreadsheet, title: str, df: pd.DataFrame) -> None:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï worksheet ‡πÉ‡∏ô Google Sheets"""
    # ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥
    title = str(title)[:99] if title else "Sheet"
    
    try:
        try:
            ws = sh.worksheet(title)
            logger.info(f"   üìù ‡∏û‡∏ö‡∏ä‡∏µ‡∏ï '{title}' ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï...")
        except gspread.exceptions.WorksheetNotFound:
            logger.info(f"   üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ï‡πÉ‡∏´‡∏°‡πà '{title}'...")
            ws = sh.add_worksheet(title=title, rows="1", cols="1")

        # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        ws.clear()
        
        if df is None or df.empty:
            ws.update("A1", [["NO DATA"]])
            logger.warning(f"   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï '{title}'")
            return

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° values ‡πÄ‡∏õ‡πá‡∏ô list of lists
        df = df.copy()
        df.columns = [str(c) for c in df.columns]
        values = [list(df.columns)] + df.astype(object).where(pd.notna(df), "").values.tolist()

        # resize ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        rows, cols = len(values), max(len(r) for r in values) if values else 1
        ws.resize(rows=rows, cols=cols)
        ws.update("A1", values, value_input_option="RAW")
        
        logger.info(f"   ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df)} ‡πÅ‡∏ñ‡∏ß, {len(df.columns)} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
        
    except Exception as e:
        logger.error(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏µ‡∏ï '{title}': {e}")
        raise

# --------- Scrape helpers ----------
async def login_with_ui(context) -> Tuple[bool, "Page"]:
    """
    ‡∏Å‡∏£‡∏≠‡∏Å user/pass ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏ô‡πâ‡∏≤ LOGIN ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î '‡∏ï‡∏Å‡∏•‡∏á'
    ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ login
    """
    page = await context.new_page()
    
    try:
        logger.info("üåê ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô...")
        await page.goto(LOGIN, wait_until="domcontentloaded", timeout=30_000)

        # ‡∏Å‡∏£‡∏≠‡∏Å username/password ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á name ‡∏Ç‡∏≠‡∏á input ‡∏ï‡∏≤‡∏° DOM ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤
        logger.info("üë§ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô...")
        await page.fill('input[name="username"]', USER, timeout=10_000)
        await page.fill('input[name="password"]', PASS, timeout=10_000)

        # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° submit ‡∏ó‡∏µ‡πà‡∏°‡∏µ name="login__username"
        logger.info("üîë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô...")
        await page.click('button[name="login__username"], input[name="login__username"]')

        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ network ‡πÄ‡∏á‡∏µ‡∏¢‡∏ö ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ index ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        await page.wait_for_load_state("networkidle", timeout=30_000)
        await page.goto(INDEX, wait_until="domcontentloaded", timeout=30_000)

        # ‡∏ñ‡πâ‡∏≤ URL ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ login ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
        current_url = page.url.lower()
        ok = ("login" not in current_url)
        
        if ok:
            logger.info(f"‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {page.url}")
        else:
            logger.error(f"‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {page.url}")
            
        return ok, page
        
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô: {e}")
        return False, page

async def extract_tables_from_dom(page, tab: int) -> pd.DataFrame:
    """‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å <table> ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
    try:
        url = f"{INDEX}?tab={tab}"
        logger.info(f"üåê ‡πÄ‡∏õ‡∏¥‡∏î {url}")
        await page.goto(url, wait_until="domcontentloaded", timeout=30_000)

        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        await page.wait_for_timeout(2000)

        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏õ‡∏£‡∏±‡∏ö page length ‡∏Ç‡∏≠‡∏á DataTables ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        length_sel = page.locator('select[name$="_length"], select.dt-input')
        if await length_sel.count() > 0:
            try:
                logger.info("‚öôÔ∏è  ‡∏õ‡∏£‡∏±‡∏ö DataTables page length...")
                opts = await length_sel.first.evaluate("(el)=>Array.from(el.options).map(o=>o.value)")
                for v in ["-1", "1000", "500", "250", "100"]:
                    if v in opts:
                        await length_sel.first.select_option(v)
                        await page.wait_for_load_state("networkidle", timeout=10_000)
                        logger.info(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á {v} ‡πÅ‡∏ñ‡∏ß‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤")
                        break
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö page length: {e}")

        # ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å <table> ‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        tables = await page.locator("table").all()
        logger.info(f"üîç ‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á {len(tables)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á")
        
        frames = []
        for i, t in enumerate(tables):
            try:
                html = await t.evaluate("(el)=>el.outerHTML")
                dfs = pd.read_html(StringIO(html))
                for df in dfs:
                    if not df.empty:
                        # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                        df.columns = [str(c).strip() for c in df.columns]
                        frames.append(df)
                        logger.info(f"   üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á {i+1}: {len(df)} ‡πÅ‡∏ñ‡∏ß, {len(df.columns)} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
            except Exception as e:
                logger.warning(f"   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á {i+1}: {e}")

        if frames:
            result = pd.concat(frames, ignore_index=True)
            logger.info(f"‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(result)} ‡πÅ‡∏ñ‡∏ß, {len(result.columns)} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
            return result
        else:
            logger.warning("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return pd.DataFrame()

    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏ö {tab}: {e}")
        return pd.DataFrame()

# --------- Main ----------
async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Web Scraper")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables
    if not USER or not PASS:
        logger.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ EDOCLITE_USER ‡πÅ‡∏•‡∏∞ EDOCLITE_PASS")
        raise RuntimeError("Missing login credentials")

    if not SHEET_ID:
        logger.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GOOGLE_SHEET_ID")
        raise RuntimeError("Missing Google Sheet ID")

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° client ‡∏Ç‡∏≠‡∏á Google Sheets
    try:
        logger.info("üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets...")
        gc = get_gspread_client()
        sh = gc.open_by_key(SHEET_ID)
        logger.info(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: '{sh.title}'")
    except Exception as e:
        logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets: {e}")
        raise

    # ‡πÄ‡∏£‡∏¥‡πà‡∏° Playwright
    try:
        async with async_playwright() as p:
            logger.info("üåê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Browser...")
            
            # ‡∏õ‡∏£‡∏±‡∏ö launch options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CI/CD environment
            launch_options = {
                "headless": True,
                "args": [
                    "--no-sandbox",
                    "--disable-dev-shm-usage",
                    "--disable-gpu",
                    "--disable-web-security",
                    "--disable-features=VizDisplayCompositor",
                    "--disable-extensions",
                    "--disable-plugins",
                    "--disable-images",
                    "--no-first-run",
                    "--disable-default-apps",
                    "--disable-background-timer-throttling",
                    "--disable-renderer-backgrounding",
                    "--disable-backgrounding-occluded-windows"
                ]
            }
            
            browser = await p.chromium.launch(**launch_options)
            context = await browser.new_context(
                viewport={"width": 1400, "height": 2000},
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
                timezone_id="Asia/Bangkok",
                locale="th-TH",
                ignore_https_errors=True,
            )

            # ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
            logger.info("üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô...")
            ok, page = await login_with_ui(context)
            if not ok:
                logger.error("‚ùå ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                await browser.close()
                raise SystemExit(1)

            logger.info("‚úÖ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

            # ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Google Sheet ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏ó‡πá‡∏ö
            successful_tabs = []
            failed_tabs = []
            
            for tab_num in TABS:
                try:
                    logger.info(f"‚û°Ô∏è  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏ö {tab_num}...")
                    df = await extract_tables_from_dom(page, tab_num)
                    
                    sheet_title = f"Tab{tab_num}"
                    upsert_worksheet(sh, sheet_title, df)
                    
                    rows_count = len(df) if not df.empty else 0
                    logger.info(f"‚úÖ ‡πÅ‡∏ó‡πá‡∏ö {tab_num} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({rows_count} ‡πÅ‡∏ñ‡∏ß)")
                    successful_tabs.append(tab_num)
                    
                    # ‡∏£‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏ô‡∏±‡∏Å
                    await asyncio.sleep(1)
                    
                except Exception as e:
                    logger.error(f"‚ùå ‡πÅ‡∏ó‡πá‡∏ö {tab_num} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                    failed_tabs.append(tab_num)

            await browser.close()
            
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
            logger.info("üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            logger.info(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(successful_tabs)} ‡πÅ‡∏ó‡πá‡∏ö {successful_tabs}")
            if failed_tabs:
                logger.warning(f"‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {len(failed_tabs)} ‡πÅ‡∏ó‡πá‡∏ö {failed_tabs}")
            
            return len(failed_tabs) == 0  # return True ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏ó‡πá‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á: {e}")
        raise

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        sys.exit(1)
