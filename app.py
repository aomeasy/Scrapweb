# app.py

import os
import threading
import queue
from flask import Flask, render_template, jsonify, request

# ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î scraper ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå scraper_app.py ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏•‡∏≤‡∏™ JobSyncApplication
from scraper_app import JobSyncApplication, Config 

app = Flask(__name__)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Global ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞ Log
app_status = {
    "is_running": False,
    "logs": []
}
log_queue = queue.Queue()

def run_scraper_task():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÉ‡∏ô background thread"""
    app_status["is_running"] = True
    app_status["logs"] = ["üöÄ [START] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."]
    
    try:
        # ---- ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâd Scraper ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ----
        app_config = Config()
        scraper = JobSyncApplication(app_config) 
        # ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™ scraper ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö queue ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á log ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        asyncio.run(scraper.run()) 
        # ---------------------------------------------------
        
        app_status["logs"].append("‚úÖ [SUCCESS] ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    except Exception as e:
        app_status["logs"].append(f"‚ùå [ERROR] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    finally:
        app_status["is_running"] = False

@app.route("/")
def index():
    """Render ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å"""
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Sheet ID ‡∏à‡∏≤‡∏Å Environment Variable ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    sheet_id = os.getenv("GOOGLE_SHEET_ID", "N/A")
    sheet_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}" if sheet_id != "N/A" else "#"
    return render_template("index.html", sheet_url=sheet_url)

@app.route("/run-scraper", methods=["POST"])
def trigger_scraper():
    """Endpoint ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
    if app_status["is_running"]:
        return jsonify({"status": "error", "message": "Scraper ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"}), 400

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô scraper ‡πÉ‡∏ô Thread ‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏Ñ‡πâ‡∏≤‡∏á
    thread = threading.Thread(target=run_scraper_task)
    thread.start()
    
    return jsonify({"status": "success", "message": "Scraper ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"})

@app.route("/status")
def get_status():
    """Endpoint ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏°‡∏≤‡∏ñ‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    return jsonify(app_status)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
